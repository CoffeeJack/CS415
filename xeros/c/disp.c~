/*********************
 * CPSC 415
 * Due: Nov 6, 2012
 * Assignment 02
 * By: Vincent Tsui
 * ID: 67221069
 *********************/

/*********************
 * CPSC 415
 * Due: Oct 9, 2012
 * Assignment 01
 * By: Vincent Tsui
 * ID: 67221069
 *********************/

/* disp.c : dispatcher
 */

#include <xeroskernel.h>

/* Your code goes here */

/************************************
 * function name: dispinit
 * require: 
 * return:
 * comment: Initialized PCB table and queues
*************************************/

extern void dispinit(void){
    //pReadyQueueFront = &pcb_table[0]; //points ready queue to PCB table front
	
    
    //DEBUG CODE
//    kprintf("pcb table start = %d\n",pReadyQueueFront);
//    kprintf("pcb size = %d\n",sizeof(struct pcb));
    
    //initialize all pcb
    int i;
    for(i = 0; i < PCB_TABLE_SIZE; i++){
        
        pcb_table[i].next = NULL;
        pcb_table[i].state = DEAD;
        pcb_table[i].msg_queue = NULL;
        //DEBUG CODE
        //kprintf("verify %d = %d\n",pcb_table[i].next,&pcb_table[i+1]);
    }
    pcb_table[PCB_TABLE_SIZE].state = DEAD;
    pcb_table[PCB_TABLE_SIZE].next = NULL;
    pcb_table[PCB_TABLE_SIZE].msg_queue = NULL;  
    
    //DEBUG CODE
//    kprintf("last %d\n",pcb_table[PCB_TABLE_SIZE].next);
    sleep_queue = NULL;
    pReadyQueueFront = NULL;
}

/************************************
 * function name: dispatch
 * require: 
 * return:
 * comment: dispatcher code, should loop indefinitely since root process should not call sysstop
*************************************/

extern void dispatch(void){
    
    //kprintf("in dispatch\n");
           
    struct pcb* process = next();    

    //DEBUG CODE
    //kprintf("pid = %d\n",process->pid);
    
    for( ;; ) {
        
        int request = contextswitch( process );
        struct pcb* old_process;
        //kprintf("request = %d\n",request);

        switch( request ) {
            case( CREATE ): 
                
                //size = getArg(process, 0);
                //func_addr = getArg(process, 4);
                create((void*)getArg(process, 4),getArg(process, 0));
   
            break;     
                
            case( YIELD ):  
                
                //WARNING: Do not call yield when preemption timer is on
                //Will cause faults!
                
                old_process = process; //save old process value
                process = next();
                if(!process) process = &pcb_table[PCB_TABLE_SIZE-1];
                
                if(old_process->pid!=IDLE_PROC_PID)
                ready(old_process); //put old process back on ready queue        
                
            break;
            case( STOP ): 
                //kprintf("in stop\n");
                
                //check processes that are sending to this process  
                free_senders(process->msg_queue);
                
                //check for processes are receiving from this process
                free_receivers(process);                          
                      
                //process->next = NULL;
                process->state = DEAD; //mark proess as DEAD
                kfree(process->pProcessStackBase); //free memory
                
                if(pReadyQueueFront==process){
                    pReadyQueueFront = pReadyQueueFront->next;
                }
    
                old_process = process;
                process = next(); //fetch next process on ready queue
                if(!process) process = &pcb_table[PCB_TABLE_SIZE-1];
                else if(old_process==process){
                    process = &pcb_table[PCB_TABLE_SIZE-1];
                    pReadyQueueFront = NULL;
                }                
                
                break;
                
            case( GETPID ): 
                process->return_code = process->pid;
            break; 
            
            case ( PUTS ):
                //str =  getArg(process, 0);
                kprintf(getArg(process, 0));
            break;
            
            case ( SEND ):
                //dest_pid = getArg(process, 8);
                //buffer = getArg(process, 4);
                //buffer_len = getArg(process, 0);   
                process->return_code = send(process,getArg(process, 8),getArg(process, 4),getArg(process, 0));
                               
                //kprintf("return code = %d\n", process->return_code);
                
                if(process->return_code==-3){
                    old_process = process;
                    process = next();
                    if(!process) process = &pcb_table[PCB_TABLE_SIZE-1];
                    old_process->next = NULL;
                }
                
            break;                
                
            case ( RECEIVE ):
                //from_pid = getArg(process, 8);
                //buffer = getArg(process, 4);
                //buffer_len = getArg(process, 0);
                process->return_code = recv(process,getArg(process, 8),getArg(process, 4),getArg(process, 0));
                
                //kprintf("return code = %d\n", process->return_code);
                
                if(process->return_code==-3){
                    old_process = process;
                    process = next();
                    if(!process) process = &pcb_table[PCB_TABLE_SIZE-1];
                    old_process->next = NULL;
                }
            break; 
            
            case ( TIMER_INT ):
                //kprintf("Timer\n");
                old_process = process; //save old process value
                process = next();
                if(!process) process = &pcb_table[PCB_TABLE_SIZE-1];           
                
                if(old_process->pid!=IDLE_PROC_PID)
                ready(old_process); //put old process back on ready queue

                tick();
                end_of_intr();
            break;
            
            case ( SLEEP ):
                //process->state = SLEEP_BLOCKED;
                old_process = process;
                process = next();
                if(!process) process = &pcb_table[PCB_TABLE_SIZE-1];
                else if(old_process==process){
                    process = &pcb_table[PCB_TABLE_SIZE-1];
                    pReadyQueueFront = NULL;
                } 
                
                //get rid of it on ready queue if not already
                if(pReadyQueueFront==old_process) pReadyQueueFront = pReadyQueueFront->next;                
                
                //sleep_duration = getArg(old_process, 0);
                sleep(old_process,getArg(old_process, 0));
                
                //kprintf("ready queue after sleep\n");
                printQueue(pReadyQueueFront); //leave this in for it to work, pointer messed up
                //refreshQueue(pReadyQueueFront);
            break;
        }          
    }
}

/************************************
 * function name: next
 * require: at least 1 process in ready queue
 * return:
 * comment: if only 1 process on ready queue, it would keep returning that one process
*************************************/

struct pcb* next(){
    
    struct pcb* process;
    //kprintf("process state = %d\n",pReadyQueueFront->state);
    
    if(pReadyQueueFront){
        if(pReadyQueueFront->next){

            pReadyQueueFront = pReadyQueueFront->next;

        }
        else{         
                if(pReadyQueueFront->state!=READY && pReadyQueueFront->state!=RUNNING){
                    pReadyQueueFront = pReadyQueueFront->next;
                    
                    return &pcb_table[PCB_TABLE_SIZE-1];
                }  
        }
    }else{
        //kprintf("empty ready queue\n");
        return NULL;
    }

    return pReadyQueueFront;
}

/************************************
 * function name: ready
 * require: new_process = valid pointer to a PCB in PCB table
 * return:
 * comment:  puts new process at the end of the ready queue
*************************************/

void ready(struct pcb* new_process){
    struct pcb* iterator;
    
    //kprintf("readying\n");
    
    if(new_process)
    new_process->state = READY;
    
    //DEBUG CODE
    //kprintf("iterator initially at: %d\n",iterator);     

    if(!pReadyQueueFront){
	//kprintf(" in here\n");
        pReadyQueueFront = new_process;
    }
    else{
	iterator = pReadyQueueFront;

	//kprintf("here\n");
	
        while(iterator->next){

            iterator = iterator->next;
	    
        }	

        iterator->next = new_process;
        new_process->next = NULL;
    }

    

}

/************************************
 * function name: printQueue
 * require: 
 * return:
 * comment: used for debug
*************************************/

void printQueue(struct pcb* iterator){
    //iterator = pReadyQueueFront;

    kprintf("printing queue...\n");
    
    if(!iterator){
        kprintf("empty queue!\n");
        return;
    }
    
    while(iterator->next){
        kprintf("pid = %d, ",iterator->pid);
        if(iterator==iterator->next)break;
        iterator = iterator->next;
    }
    kprintf("pid = %d\n",iterator->pid);
}

/************************************
 * function name: refreshQueue
 * require: 
 * return:
 * comment: used for debug
*************************************/

void refreshQueue(struct pcb* iterator){
    //iterator = pReadyQueueFront;

    //kprintf("printing queue...\n");
    
    if(!iterator){
        //kprintf("empty queue!\n");
        return;
    }
    
    while(iterator->next){
        //kprintf("pid = %d\n",iterator->pid);
        if(iterator==iterator->next)break;
        iterator = iterator->next;
    }
    //kprintf("pid = %d\n",iterator->pid);
}

/************************************
 * function name: getArg
 * require: 
 * return:
 * comment: fetches arguments pushed onto the process stack
*************************************/

int getArg(struct pcb* process, int addr_start){
    
    int arg_offset=12; //12 bytes offset to reach start of Args 
    
    return (*(process->pArgs+arg_offset+addr_start+3))*(16777216) +
    (*(process->pArgs+arg_offset+addr_start+2))*(65536) +
    (*(process->pArgs+arg_offset+addr_start+1))*(256) + 
    (*(process->pArgs+arg_offset+addr_start));
            
}

/************************************
 * function name: dequeue
 * require: 
 * return:
 * comment: remove a process from some queue
*************************************/

struct pcb* dequeue(struct pcb* head, struct pcb* process){
    struct pcb* iterator;    
    
    if(process==head){
        //kprintf("haha\n");
        
        head = head->next;
        if(head==NULL) kprintf("null\n");        
        //process->next = NULL;
        return head;
    }else{
        iterator = head;
        
        while(iterator->next){
        
            if(iterator->next==process){
                iterator->next = iterator->next->next;
                //process->next = NULL;
                return head;
            }
            iterator = iterator->next;
        } 
        
        if(iterator->next==process){
            iterator->next = NULL;
            return head;
        }
    }
    kprintf("not found!\n");
}

/************************************
 * function name: addtoqueue
 * require: 
 * return:
 * comment: add a process from some queue
*************************************/

struct pcb* addtoqueue(struct pcb* head, struct pcb* process){
    
    struct pcb* iterator = head;
    
    if(head==NULL){
        //kprintf("null head\n");
        head = process;
        //head->next = NULL;
    }
    else{
        kprintf("adding to queue\n");
        
        while(iterator->next){
            iterator = iterator->next;
        }

        iterator->next = process;
        //iterator->next->next = NULL;
    }
    
}

/************************************
 * function name: countQueue
 * require: 
 * return:
 * comment: counts the number of processes in a queue
*************************************/

int countQueue(struct pcb* head){
    int count = 0;
    struct pcb* iterator = head;
    
    if(!head) return 0;
    
    while(iterator->next){
        
        count++;
        
        iterator = iterator->next;
    }
    
    return count;
}

/************************************
 * function name: free_senders
 * require: 
 * return:
 * comment: before process dies, use this to check if any process is sending to it
*************************************/

void free_senders(struct pcb* iterator){
    //iterator = process->msg_queue;
                
    //kprintf("process dying pid = %d\n",process->pid);
    //printQueue(iterator);

    //check processes that are sending to this process
    if(iterator){
        if(iterator->state==SEND_BLOCKED){
            iterator->return_code = -1;
            ready(iterator);
        }

        while(iterator->next){
            if(iterator->state==SEND_BLOCKED){
                iterator->return_code = -1;
                ready(iterator);
            }            
            iterator = iterator->next;
        }       
    } 
}

/************************************
 * function name: free_receivers
 * require: 
 * return:
 * comment: before process dies, use this to check if any process is receiving from it
*************************************/

void free_receivers(struct pcb* process){
    
    struct pcb* iterator;
    int i;
    
    for(i=0;i<PCB_TABLE_SIZE-1;i++){
        iterator = pcb_table[i].msg_queue;

        //kprintf("process index %d with msg queue %d\n",i,iterator);

        if(iterator && process){    

            if(iterator->pid==process->pid){

                //kprintf("process to unlock = %d\n",pcb_table[i].pid);
                if(pcb_table[i].state==RECV_BLOCKED){
                    pcb_table[i].return_code = -1;
                    ready(&pcb_table[i]);
                }

            }
            else{
                while(iterator->next){

                    if(iterator->pid==process->pid){
                        if(pcb_table[i].state==RECV_BLOCKED){
                            pcb_table[i].return_code = -1;
                            ready(&pcb_table[i]);
                        }
                        break;
                    }

                    iterator = iterator->next;
                }
            }

        }

    }
}
